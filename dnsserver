#!/usr/bin/python3.4

import socketserver
import socket
from collections import namedtuple
import threading
import struct
import random
import sys
import getopt
'''
Represents a basic DNS Server, with dynamic IP redirection
for load-balancing and performance
@authors Arvin Sharma, Cbrown
@license AGPLv3
'''

optlist, _ = getopt.getopt(sys.argv[1:], 'p:n:')
for opt in optlist:
    if opt[0] == '-p':
        port = int(opt[1])
    elif opt[0] == '-n':
        name = opt[1]

class ThreadedDNSRequestHandler(socketserver.BaseRequestHandler):
    '''
        handler for incoming packets for this server,
        assumes that we will receive DNS messages
    '''

    DNS_PKT_SIZE = 512
    DNS_FMT = ">HHHHHH"
    DNS_UNPK = namedtuple('DNS', 'pkt_id flags qdcount ancount nscount arcount')
    global port
    SCAMPER_PORT = port
    SERVER_LIST ={
                'ec2-52-90-80-45.compute-1.amazonaws.com' : '54.84.248.26',
                'ec2-54-183-23-203.us-west-1.compute.amazonaws.com' : '54.183.23.203',
                'ec2-54-70-111-57.us-west-2.compute.amazonaws.com' : '54.70.111.57',
                'ec2-52-215-87-82.eu-west-1.compute.amazonaws.com' : '52.215.87.82',
                'ec2-52-28-249-79.eu-central-1.compute.amazonaws.com' : '52.28.249.79',
                'ec2-54-169-10-54.ap-southeast-1.compute.amazonaws.com' : '54.169.10.54',
                'ec2-52-62-198-57.ap-southeast-2.compute.amazonaws.com' : '52.62.198.57',
                'ec2-52-192-64-163.ap-northeast-1.compute.amazonaws.com' : '52.192.64.163',
                'ec2-54-233-152-60.sa-east-1.compute.amazonaws.com' : '54.233.152.60'
                }

    server_cache = {}

    ### This stuff is hard-coded. will only work with this domain
    CNAME = "cs5700cdnexamplecom"
    DOMAIN = "cs5700cdn.example.com"
    CNAME_LEN = 21
    #qname part of packet
    Q_PKT = 0

    def handle(self):
        print("got stuff")
        #request is the socket
        self.data = self.request[0]
        self.sock = self.request[1]
        print("got this data")
        print(self.data)
        print("size")
        print(len(self.data))
        content = self.__unpack_dns_pkt(self.data)
        if (content == -1):
            print("Bad request, echoing back")
            self.sock.sendto(self.data, self.client_address)
            return
        self.sock.sendto(self.__handle_dns_response(content, self.client_address[0]), self.client_address)


    ##
    ## Finds best replica using active measurements
    ## pings from each replica server to client
    ##
    def __find_best_replica(self, clientip):
        print("finding best replica...")
        lowest_latency = 999990
        best_server = ''
        for key in self.SERVER_LIST:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            # host is replica server
            hostip = socket.gethostbyname(key)
            try:
                ## connect to scamper server in replica
                sock.connect((hostip, self.SCAMPER_PORT))
                ## send clientip to scamper server
                sock.sendall(clientip)
                ## get latency back
                server_latency = int(float(sock.recv(1024).strip()))
                print("Latency: " + str(server_latency))
                if (server_latency < lowest_latency):
                    best_server = self.SERVER_LIST[key]
                    lowest_latency = server_latency

            except socket.error as err:
                print("Error connecting active measurement: " + str(err))
            finally:
                sock.close()
            if (best_server == ''):
                ## an error must have occured
                ## return random server
                return self.SERVER_LIST[random.choice(list(self.SERVER_LIST.keys()))]

        return best_server

    #unpacks dns and makes question pkt
    def __unpack_dns_pkt(self, pkt):
        unpk = struct.unpack(self.DNS_FMT, pkt[0:12])

        cname = pkt[13: 13 + self.CNAME_LEN].decode("utf-8")
        cname = ''.join(filter(str.isalnum, cname))
        print("|" + cname + "|" )
        print("|" + self.CNAME + "|")

        print(cname == self.CNAME)
        if (not cname == self.CNAME):
            return -1
        print("CNAME: ")
        print(cname)
        ## build query
        self.Q_PKT = pkt[12 : 13 + self.CNAME_LEN + 5]
        return unpk


    def __handle_dns_response(self, content, ip):
        print("Got content")
        print(content)
        return self.__pack_dns(content[0], 0x8180, content[2], 1, content[4], content[5], ip)


    def __make_dns_answer(self, ip):
        return struct.pack(">HHHLH4s", 0xc00c, 0x0001, 0x0001, 60, 4, socket.inet_aton(ip))


    def __pack_dns(self, pkt_id, flags, qdcount, ancount, nscount, arcount, ip):
        best_server = 0
        if ip in self.server_cache:
            best_server = self.server_cache[ip]
        else:
            best_server = self.__find_best_replica(ip)
            self.server_cache[ip] = best_server
        return struct.pack(self.DNS_FMT, pkt_id, flags, qdcount, ancount, nscount, arcount) \
                + self.Q_PKT \
                +  self.__make_dns_answer(best_server)




class ThreadedDNSServer(socketserver.ThreadingMixIn, socketserver.UDPServer):
    '''
        Multi-threaded server for performance, should make things faster
        Gonna just go with all the inherited stuff, so nothing is here!
    '''
    pass

class DNSServerFront(object):
    '''
        Represents the front-end interface for the DNS Server
    '''
    # server object
    server = 0

    def __init__(self,host, port):
        self.server = ThreadedDNSServer((host, port), ThreadedDNSRequestHandler)
        # Start a thread with the server -- that thread will then start one
        # more thread for each request
        server_thread = threading.Thread(target=self.server.serve_forever)
        # Exit the server thread when the main thread terminates
        server_thread.daemon = True
        server_thread.start()
        print("Server loop running in thread:", server_thread.name)

        self.server.serve_forever()

        self.server.shutdown()
        self.server.server_close()

if __name__ == "__main__":
    print("PORT:")
    print(port)    
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    print(s.getsockname()[0])
    host = s.getsockname()[0]
    s.close()
    foo = DNSServerFront(host, port)
