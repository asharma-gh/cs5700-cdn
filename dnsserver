#!/usr/bin/env python3
import socketserver as SocketServer
import socket
from collections import namedtuple
import threading
'''
Represents a basic DNS Server, with dynamic IP redirection
for load-balancing and performance
@authors Arvin Sharma, Cbrown
@license AGPLv3
'''

class ThreadedDNSRequestHandler(SocketServer.BaseRequestHandler):
    '''
        handler for incoming packets for this server,
        assumes that we will receive DNS messages
    '''

    DNS_PKT_SIZE = 512
    DNS_FMT = "!HBBHHHH"

    DNS_UNPK = namedtuple('DNS', 'pkt_id qr opcode aa tc rd ra rcode qdcount ancount nscount arcount')

    def handle(self):
        #request is the socket
        packet = self.request.recv(DNS_PKT_SIZE)
        content = __unpack_dns_pkt(pkt)

        return "fiz"

    #stuff
    def __unpack_dns_pkt(self, pkt):
        tmp = struct.unpack(DNS_FMT, pkt)
        qr = ((tmp[1] >> 7) & 1)
        opcode = ((tmp[1] >> 3) & 0x7)
        aa = ((tmp[1] >> 2) & 1)
        tc = ((tmp[1] >> 1) & 1)
        rd = (tmp[1] & 1)
        ra = ((tmp[2] >> 7) & 1)
        rcode = (tmp[2] & 0x7)

        return DNS_UNPK(pkt_id=tmp[0], qr=qr, opcode=opcode, aa=aa, tc=tc, rd=rd, ra=ra, rcode=rcode, qdcount=tmp[3], ancount=tmp[4], nscount=tmp[5], arcount=tmp[6])

    def __handle_dns_question(self, pkt):
        pass

    def __handle_dns_answer(self, pkt):
        pass

    def __pack_dns_response(self, content):
        pass
    def __pack_dns(pkt_id, qr, opcode, aa, tc, rd, ra, rcode, qdcount, ancount, nscount, arcount):
        flags1 = (qr << 7) | (opcode << 3) | (aa << 2) | (tc << 1) | rd
        flags2 = (ra << 7) | rcode
        return struct.pack(DNS_FMT, pkt_id, flags1, flags2, qdcount, ancount, nscount, arcount)

class ThreadedDNSServer(SocketServer.ThreadingMixIn, SocketServer.UDPServer):
    '''
        Multi-threaded server for performance, should make things faster
        Gonna just go with all the inherited stuff, so nothing is here!
    '''
    pass

class DNSServerFront(object):
    '''
        Represents the front-end interface for the DNS Server
    '''
    # server object
    server = 0

    def __init__(self,host, port):
        self.server = ThreadedDNSServer((host, port), ThreadedDNSRequestHandler)
        # Start a thread with the server -- that thread will then start one
        # more thread for each request
        server_thread = threading.Thread(target=self.server.serve_forever)
        # Exit the server thread when the main thread terminates
        server_thread.daemon = True
        server_thread.start()
        print("Server loop running in thread:", server_thread.name)

        self.server.serve_forever()

        self.server.shutdown()
        self.server.server_close()

if __name__ == "__main__":
    foo = DNSServerFront("localhost", 0)
