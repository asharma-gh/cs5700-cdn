#!/usr/bin/python3

import getopt
import socketserver
import mmap
import sys
import os
import threading
import hashlib
import glob
import http.client
import collections
import time
import subprocess
import random

optlist, _ = getopt.getopt(sys.argv[1:], 'p:o:')
for opt in optlist:
    if opt[0] == '-p':
        port = int(opt[1])
    elif opt[0] == '-o':
        origin = opt[1]

conn = http.client.HTTPConnection(origin + ":8080")
lock = threading.Lock()

cache = {}

def build_cache(cache):
    files = glob.glob("www/*")
    for f in files:
        opened = open(f, "r+b")
        cache[f[4:]] = opened.read()

class LRU():
    def __init__(self):
        self.cache = collections.OrderedDict()
        self.size = 0
        self.lock = threading.Lock()

    def get(self, key):
        self.lock.acquire()
        val = self.cache.pop(key)
        self.cache[key] = val
        self.lock.release()
        return val

    def has(self, key):
        self.lock.acquire()
        truth = key in self.cache
        self.lock.release()
        return truth

    def set(self, key, value):
        self.lock.acquire()
        while (self.size + len(value)) > 2500000:
            old = self.cache.popitem(last=False)
            self.size -= len(old[1])
        self.cache[key] = value
        self.size += len(value)
        self.lock.release()

def update_cache(cache):
    downloading = True
    while downloading:
        if os.path.isfile(".cache_done"):
            downloading = False
        build_cache(cache)
        time.sleep(1)

lru_cache = LRU()

class HTTPRequest(socketserver.BaseRequestHandler):
    def handle(self):
        self.data = self.request.recv(1024).strip()
        command, path, version = self.data.split('\r\n'.encode())[0].split()
        if command == "GET".encode():
            global cache, lru_cache, lock
            hashpath = hashlib.sha256(path).hexdigest()
            if hashpath in cache:
                response = cache[hashpath]
                self.request.sendall(response)
            elif lru_cache.has(hashpath):
                self.request.sendall(lru_cache.get(hashpath))
            else:
                global origin, conn
                conn.connect()
                conn.request("GET", path.decode())
                r = conn.getresponse()
                headers = r.getheaders()
                body = r.read().decode()
                if r.getheader('Transfer-Encoding') == "chunked":
                    headers.remove(('Transfer-Encoding', 'chunked'))

                header_str = '\r\n'.join("{}: {}".format(key, val) for key, val in headers)
                if r.getheader('Content-Length') != None:
                    header_str += ("Content-Length: " + str(len(body)) + "\r\n\r\n")
                else:
                    header_str += "\r\n\r\n"

                web_page = ("HTTP/1.1 " + str(r.status) + " " + r.reason + "\r\n" + header_str + body).encode()
                self.request.sendall(web_page)
                lru_cache.set(hashpath, web_page)
        elif command == "SCAMPER".encode():
            res = self.__get_time(path.decode())
            self.request.sendall(res.encode())

    def __get_time(self, ip):
        #print("hello?")
        scamper_cmd = "scamper -c \'ping -c 1\' -i " + ip
        res = subprocess.getoutput(scamper_cmd)
        print(res)
        lines = res.split('\n')
        if (len(lines) < 5):
            return "99999"
        mline = lines[4]
        avg = mline.split("/")[5]
        print("Average from this: " + avg)
        return avg

class ThreadHTTPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

class HTTPServerFront(object):
    server = 0
    def __init__(self, host, port):
        self.server = ThreadHTTPServer((host, port), HTTPRequest)

        server_thread = threading.Thread(target=self.server.serve_forever)
        server_thread.daemon = True
        server_thread.start()
        print("Server started")

        self.server.serve_forever()

        self.server.shutdown()
        self.server.server_close()

if __name__ == "__main__":
    t = threading.Thread(target=update_cache, args=(cache,))
    t.start()
    baz = HTTPServerFront("", port)
