#!/bin/env python3

import getopt
import socketserver
import mmap
import sys
import os
import threading

optlist, _ = getopt.getopt(sys.argv[1:], 'p:o:')
for opt in optlist:
    if opt[0] == '-p':
        port = int(opt[1])
    elif opt[0] == '-o':
        origin = opt[1]

cache = {}
for root, _, files in os.walk('www'):
    for f in files:
        opened = open(os.path.join(root, f), "r+b")
        #print(root[4:], f)
        cache["/" + root[4:] + "/" + f] = mmap.mmap(opened.fileno(), 0)

class HTTPRequest(socketserver.BaseRequestHandler):
    def handle(self):
        self.data = self.request.recv(1024).strip()
        command, path, version = self.data.split('\r\n'.encode())[0].split()
        if command == "GET".encode():
            global cache
            ok = cache[path.decode()].read()
            self.request.sendall(ok)
            cache[path.decode()].seek(0)

class ThreadedHTTPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

class HTTPServerFront(object):
    server = 0
    def __init__(self, host, port):
        self.server = ThreadedHTTPServer((host, port), HTTPRequest)

        server_thread = threading.Thread(target=self.server.serve_forever)
        # Exit the server thread when the main thread terminates
        server_thread.daemon = True
        server_thread.start()
        print("Server loop running in thread:", server_thread.name)

        self.server.serve_forever()

        self.server.shutdown()
        self.server.server_close()

if __name__ == "__main__":
    baz = HTTPServerFront("", port)
