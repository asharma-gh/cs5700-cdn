#!/usr/bin/python3

import getopt
import socketserver
import mmap
import sys
import os
import threading
import hashlib
import glob
import http.client

optlist, _ = getopt.getopt(sys.argv[1:], 'p:o:')
for opt in optlist:
    if opt[0] == '-p':
        port = int(opt[1])
    elif opt[0] == '-o':
        origin = opt[1]

conn = http.client.HTTPConnection(origin + ":8080")

cache = {}
files = glob.glob("www/*")
for f in files:
    opened = open(f, "r+b")
    cache[f[4:]] = mmap.mmap(opened.fileno(), 0)

class HTTPRequest(socketserver.BaseRequestHandler):
    def handle(self):
        self.data = self.request.recv(1024).strip()
        command, path, version = self.data.split('\r\n'.encode())[0].split()
        if command == "GET".encode():
            global cache
            hashpath = hashlib.sha256(path).hexdigest()
            if hashpath in cache:
                response = cache[hashpath]
                self.request.sendall(response.read())
                response.seek(0)
            else:
                global origin, conn
                conn.request("GET", path.decode())
                r = conn.getresponse()
                headers = r.getheaders()
                body = r.read().decode()
                if r.getheader('Transfer-Encoding') == "chunked":
                    headers.remove(('Transfer-Encoding', 'chunked'))

                header_str = '\r\n'.join("{}: {}".format(key, val) for key, val in headers)
                if r.getheader('Content-Length') != None:
                    header_str += ("Content-Length: " + len(body) + "\r\n\r\n")
                else:
                    header_str += "\r\n\r\n"

                self.request.sendall(("HTTP/1.1 " + str(r.status) + " " + r.reason + "\r\n" + header_str + body).encode())

class ForkHTTPServer(socketserver.ForkingMixIn, socketserver.TCPServer):
    pass

class HTTPServerFront(object):
    server = 0
    def __init__(self, host, port):
        self.server = ForkHTTPServer((host, port), HTTPRequest)

        server_thread = threading.Thread(target=self.server.serve_forever)
        server_thread.daemon = True
        server_thread.start()
        print("Server started")

        self.server.serve_forever()

        self.server.shutdown()
        self.server.server_close()

if __name__ == "__main__":
    baz = HTTPServerFront("", port)
